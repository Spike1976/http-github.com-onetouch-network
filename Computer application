To build a cross-platform desktop application for Windows, Mac, and Linux, we can use Electron.js, which allows us to create desktop apps using web technologies (HTML, CSS, JavaScript).

Below is the implementation for a cross-platform desktop application that securely stores data locally using SQLite. The app will allow users to add, view, and delete data.


---

File Structure

LocalStorageApp/
├── main.js                  # Main Electron process
├── preload.js               # Preload script for secure communication
├── renderer.js              # Renderer script for UI logic
├── database.js              # SQLite database helper
├── index.html               # Main HTML file for the app
├── package.json             # App metadata and dependencies
├── assets/
│   ├── styles.css           # Styles for the app
├── node_modules/            # Installed dependencies
├── .gitignore               # Files to ignore in version control


---

Implementation

1. Main Electron Process

Path: main.js

const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const { addData, getAllData, deleteData } = require('./database');

let mainWindow;

app.whenReady().then(() => {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
    },
  });

  mainWindow.loadFile('index.html');

  // Handle application events
  ipcMain.handle('add-data', async (event, key, value) => addData(key, value));
  ipcMain.handle('get-all-data', async () => getAllData());
  ipcMain.handle('delete-data', async (event, key) => deleteData(key));

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});


---

2. Preload Script

Path: preload.js

const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  addData: (key, value) => ipcRenderer.invoke('add-data', key, value),
  getAllData: () => ipcRenderer.invoke('get-all-data'),
  deleteData: (key) => ipcRenderer.invoke('delete-data', key),
});


---

3. SQLite Database Helper

Path: database.js

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'localdata.db');
const db = new sqlite3.Database(dbPath);

// Create table if it doesn't exist
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS user_data (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      key TEXT UNIQUE,
      value TEXT
    )
  `);
});

function addData(key, value) {
  return new Promise((resolve, reject) => {
    db.run(
      `INSERT INTO user_data (key, value) VALUES (?, ?)`,
      [key, value],
      (err) => {
        if (err) reject('Key must be unique.');
        else resolve('Data added successfully.');
      }
    );
  });
}

function getAllData() {
  return new Promise((resolve, reject) => {
    db.all(`SELECT * FROM user_data`, [], (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
}

function deleteData(key) {
  return new Promise((resolve, reject) => {
    db.run(`DELETE FROM user_data WHERE key = ?`, [key], (err) => {
      if (err) reject(err);
      else resolve('Data deleted successfully.');
    });
  });
}

module.exports = { addData, getAllData, deleteData };


---

4. HTML Interface

Path: index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Local Storage App</title>
  <link rel="stylesheet" href="assets/styles.css">
</head>
<body>
  <h1>Local Storage App</h1>

  <div class="container">
    <div class="form">
      <input type="text" id="key" placeholder="Key" />
      <input type="text" id="value" placeholder="Value" />
      <button id="add-btn">Add Data</button>
    </div>

    <div id="data-list"></div>
  </div>

  <script src="renderer.js"></script>
</body>
</html>


---

5. Renderer Script

Path: renderer.js

const keyInput = document.getElementById('key');
const valueInput = document.getElementById('value');
const addButton = document.getElementById('add-btn');
const dataList = document.getElementById('data-list');

// Add Data
addButton.addEventListener('click', async () => {
  const key = keyInput.value.trim();
  const value = valueInput.value.trim();

  if (key && value) {
    const result = await window.electronAPI.addData(key, value);
    alert(result);
    loadData();
    keyInput.value = '';
    valueInput.value = '';
  } else {
    alert('Both key and value are required.');
  }
});

// Load Data
async function loadData() {
  const data = await window.electronAPI.getAllData();
  dataList.innerHTML = '';

  data.forEach((item) => {
    const div = document.createElement('div');
    div.className = 'data-item';
    div.innerHTML = `
      <strong>Key:</strong> ${item.key} <br>
      <strong>Value:</strong> ${item.value} <br>
      <button onclick="deleteData('${item.key}')">Delete</button>
    `;
    dataList.appendChild(div);
  });
}

// Delete Data
async function deleteData(key) {
  const result = await window.electronAPI.deleteData(key);
  alert(result);
  loadData();
}

// Initialize
loadData();


---

6. CSS Styling

Path: assets/styles.css

body {
  font-family: Arial, sans-serif;
  text-align: center;
  margin: 0;
  padding: 0;
  background: #f9f9f9;
}

h1 {
  background: #6200ea;
  color: white;
  padding: 1em;
  margin: 0;
}

.container {
  padding: 1em;
}

.form {
  margin-bottom: 1em;
}

input {
  margin: 0.5em;
  padding: 0.5em;
  width: 200px;
}

button {
  padding: 0.5em 1em;
  background: #6200ea;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background: #3700b3;
}

.data-item {
  background: #fff;
  margin: 1em 0;
  padding: 1em;
  border: 1px solid #ccc;
}


---

Installation and Running

1. Install Node.js

Download and install Node.js.

2. Set Up the Project

# Clone the repository
git clone https://github.com/your-username/localstorage-app.git
cd localstorage-app

# Install dependencies
npm install

3. Run the App

npm start


---

Packaging for Distribution

1. Install Electron Packager:

npm install -g electron-packager


2. Package the App:

electron-packager . LocalStorageApp --platform=win32,linux,darwin --arch=x64 --out=dist/



This will create executable files for Windows, Mac, and Linux in the dist/ directory.


---

This implementation provides a full cross-platform desktop application.
